{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this;\n\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport React, { useState } from \"react\";\nimport Input from \"../ui/Input\";\nimport Button from \"../ui/buttons\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar AuthForm = function AuthForm(_ref) {\n  var isLogin = _ref.isLogin,\n      onSubmit = _ref.onSubmit,\n      credentialsInvalid = _ref.credentialsInvalid;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      enteredEmail = _useState2[0],\n      setEnteredEmail = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      enteredConfirmEmail = _useState4[0],\n      setEnteredConfirmEmail = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      enteredPassword = _useState6[0],\n      setEnteredPassword = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      enteredConfirmPassword = _useState8[0],\n      setEnteredConfirmPassword = _useState8[1];\n\n  var emailIsInvalid = credentialsInvalid.email,\n      emailsDontMatch = credentialsInvalid.confirmEmail,\n      passwordIsInvalid = credentialsInvalid.password,\n      passwordsDontMatch = credentialsInvalid.confirmPassword;\n\n  function updateInputValueHandler(inputType, enteredValue) {\n    switch (inputType) {\n      case \"email\":\n        setEnteredEmail(enteredValue);\n        break;\n\n      case \"confirmEmail\":\n        setEnteredConfirmEmail(enteredValue);\n        break;\n\n      case \"password\":\n        setEnteredPassword(enteredValue);\n        break;\n\n      case \"confirmPassword\":\n        setEnteredConfirmPassword(enteredValue);\n        break;\n    }\n  }\n\n  function submitHandler() {\n    onSubmit({\n      email: enteredEmail,\n      confirmEmail: enteredConfirmEmail,\n      password: enteredPassword,\n      confirmPassword: enteredConfirmPassword\n    });\n  }\n\n  return _jsxs(View, {\n    children: [_jsx(Input, {\n      label: \"Email Address :\",\n      onUpdateValue: updateInputValueHandler.bind(_this, \"email\"),\n      value: enteredEmail,\n      keyboardType: \"email-address\",\n      isInvalid: emailIsInvalid\n    }), !isLogin && _jsx(Input, {\n      label: \"Confirm Email Address\",\n      onUpdateValue: updateInputValueHandler.bind(_this, \"confirmEmail\"),\n      value: enteredConfirmEmail,\n      keyboardType: \"email-address\",\n      isInvalid: emailsDontMatch\n    }), _jsx(Input, {\n      label: \"Password\",\n      onUpdateValue: updateInputValueHandler.bind(_this, \"password\"),\n      secure: true,\n      value: enteredPassword,\n      isInvalid: passwordIsInvalid\n    }), !isLogin && _jsx(Input, {\n      label: \"Confirm Password\",\n      onUpdateValue: updateInputValueHandler.bind(_this, \"confirmPassword\"),\n      secure: true,\n      value: enteredConfirmPassword,\n      isInvalid: passwordsDontMatch\n    }), _jsx(View, {\n      style: styles.buttons,\n      children: _jsx(Button, {\n        onPress: submitHandler,\n        backc: \"#FF5267\",\n        wid: \"80%\",\n        font: \"white\",\n        children: isLogin ? \"Log In\" : \"Sign Up\"\n      })\n    })]\n  });\n};\n\nexport default AuthForm;\nvar styles = StyleSheet.create({\n  buttons: {\n    marginTop: \"10%\"\n  }\n});","map":{"version":3,"names":["React","useState","Input","Button","AuthForm","isLogin","onSubmit","credentialsInvalid","enteredEmail","setEnteredEmail","enteredConfirmEmail","setEnteredConfirmEmail","enteredPassword","setEnteredPassword","enteredConfirmPassword","setEnteredConfirmPassword","emailIsInvalid","email","emailsDontMatch","confirmEmail","passwordIsInvalid","password","passwordsDontMatch","confirmPassword","updateInputValueHandler","inputType","enteredValue","submitHandler","bind","styles","buttons","StyleSheet","create","marginTop"],"sources":["C:/Users/musta/Desktop/New folder/Crowd-Funding-Application/components/forms/AuthForm.js"],"sourcesContent":["import { View, Text, StyleSheet } from \"react-native\";\r\nimport React, { useState } from \"react\";\r\n\r\nimport Input from \"../ui/Input\";\r\nimport Button from \"../ui/buttons\";\r\n\r\nconst AuthForm = ({ isLogin, onSubmit, credentialsInvalid }) => {\r\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\r\n  const [enteredConfirmEmail, setEnteredConfirmEmail] = useState(\"\");\r\n  const [enteredPassword, setEnteredPassword] = useState(\"\");\r\n  const [enteredConfirmPassword, setEnteredConfirmPassword] = useState(\"\");\r\n  const {\r\n    email: emailIsInvalid,\r\n    confirmEmail: emailsDontMatch,\r\n    password: passwordIsInvalid,\r\n    confirmPassword: passwordsDontMatch,\r\n  } = credentialsInvalid;\r\n\r\n  function updateInputValueHandler(inputType, enteredValue) {\r\n    switch (inputType) {\r\n      case \"email\":\r\n        setEnteredEmail(enteredValue);\r\n        break;\r\n      case \"confirmEmail\":\r\n        setEnteredConfirmEmail(enteredValue);\r\n        break;\r\n      case \"password\":\r\n        setEnteredPassword(enteredValue);\r\n        break;\r\n      case \"confirmPassword\":\r\n        setEnteredConfirmPassword(enteredValue);\r\n        break;\r\n    }\r\n  }\r\n\r\n  function submitHandler() {\r\n    onSubmit({\r\n      email: enteredEmail,\r\n      confirmEmail: enteredConfirmEmail,\r\n      password: enteredPassword,\r\n      confirmPassword: enteredConfirmPassword,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <View>\r\n      <Input\r\n        label=\"Email Address :\"\r\n        onUpdateValue={updateInputValueHandler.bind(this, \"email\")}\r\n        value={enteredEmail}\r\n        keyboardType=\"email-address\"\r\n        isInvalid={emailIsInvalid}\r\n      />\r\n      {!isLogin && (\r\n        <Input\r\n          label=\"Confirm Email Address\"\r\n          onUpdateValue={updateInputValueHandler.bind(this, \"confirmEmail\")}\r\n          value={enteredConfirmEmail}\r\n          keyboardType=\"email-address\"\r\n          isInvalid={emailsDontMatch}\r\n        />\r\n      )}\r\n      <Input\r\n        label=\"Password\"\r\n        onUpdateValue={updateInputValueHandler.bind(this, \"password\")}\r\n        secure\r\n        value={enteredPassword}\r\n        isInvalid={passwordIsInvalid}\r\n      />\r\n      {!isLogin && (\r\n        <Input\r\n          label=\"Confirm Password\"\r\n          onUpdateValue={updateInputValueHandler.bind(this, \"confirmPassword\")}\r\n          secure\r\n          value={enteredConfirmPassword}\r\n          isInvalid={passwordsDontMatch}\r\n        />\r\n      )}\r\n      <View style={styles.buttons}>\r\n        <Button\r\n          onPress={submitHandler}\r\n          backc={\"#FF5267\"}\r\n          wid={\"80%\"}\r\n          font={\"white\"}\r\n        >\r\n          {isLogin ? \"Log In\" : \"Sign Up\"}\r\n        </Button>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n\r\nconst styles = StyleSheet.create({\r\n  buttons: {\r\n    marginTop: \"10%\",\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}