{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from \"expo-status-bar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport * as SecureStore from \"expo-secure-store\";\nimport AuthContextProvider, { AuthContext } from \"./store/auth-context\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport IconButton from \"./components/ui/IconButton\";\nimport \"./Ignorewarning\";\nimport GetStarted from \"./screens/GetStarted\";\nimport start from \"./screens/start\";\nimport Choice from \"./screens/Choice\";\nimport Login from \"./screens/Login\";\nimport Signup from \"./screens/Signup\";\nimport Home from \"./screens/Home\";\nimport Drawer_Nav from \"./components/Must_components/Drawer_Nav\";\nimport Details from \"./components/Must_components/Details\";\nimport Rewards from \"./components/Must_components/Rewards\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\n\nfunction AuthStack() {\n  return _jsxs(Stack.Navigator, {\n    initialRouteName: \"start\",\n    screenOptions: {\n      headerShown: false\n    },\n    children: [_jsx(Stack.Screen, {\n      name: \"start\",\n      component: start\n    }), _jsx(Stack.Screen, {\n      name: \"ChoiceScreen\",\n      component: Choice\n    }), _jsx(Stack.Screen, {\n      name: \"Login\",\n      component: Login\n    }), _jsx(Stack.Screen, {\n      name: \"Signup\",\n      component: Signup\n    })]\n  });\n}\n\nfunction AuthenticatedStack() {\n  var authCtx = useContext(AuthContext);\n  return _jsxs(Stack.Navigator, {\n    screenOptions: {\n      headerStyle: {\n        backgroundColor: \"#0097FF\"\n      },\n      contentStyle: {\n        backgroundColor: \"black\"\n      }\n    },\n    initialRouteName: \"Drawer_Nav\",\n    children: [_jsx(Stack.Screen, {\n      name: \"Drawer_Nav\",\n      component: Drawer_Nav,\n      options: {\n        headerShown: false\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"Details\",\n      component: Details,\n      options: {\n        title: \"Product Details\",\n        headerShown: true,\n        headerStyle: {\n          backgroundColor: \"#F23B25\"\n        },\n        headerTitleStyle: {\n          fontSize: 20\n        }\n      }\n    }), _jsx(Stack.Screen, {\n      options: {\n        headerStyle: {\n          backgroundColor: \"#F23B25\"\n        }\n      },\n      name: \"Rewards\",\n      component: Rewards\n    })]\n  });\n}\n\nfunction Navigation() {\n  var authCtx = useContext(AuthContext);\n  return _jsxs(NavigationContainer, {\n    children: [!authCtx.isAuthenticated && _jsx(AuthStack, {}), authCtx.isAuthenticated && _jsx(AuthenticatedStack, {})]\n  });\n}\n\nfunction Root() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isTryingLogin = _useState2[0],\n      SetIsTryingLogin = _useState2[1];\n\n  var authCtx = useContext(AuthContext);\n  useEffect(function () {\n    function fetchToken() {\n      var storedToken;\n      return _regeneratorRuntime.async(function fetchToken$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(SecureStore.getItemAsync(\"token\"));\n\n            case 2:\n              storedToken = _context.sent;\n\n              if (storedToken) {\n                authCtx.authenticate(storedToken);\n              }\n\n              SetIsTryingLogin(false);\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(SplashScreen.hideAsync());\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchToken();\n  }, []);\n\n  if (isTryingLogin) {\n    SplashScreen.preventAutoHideAsync();\n  }\n\n  return _jsx(Navigation, {});\n}\n\nexport default function App() {\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      style: \"light\"\n    }), _jsx(AuthContextProvider, {\n      children: _jsx(Root, {})\n    })]\n  });\n}","map":{"version":3,"names":["StatusBar","useContext","useEffect","useState","NavigationContainer","createNativeStackNavigator","SecureStore","AuthContextProvider","AuthContext","SplashScreen","IconButton","GetStarted","start","Choice","Login","Signup","Home","Drawer_Nav","Details","Rewards","Stack","AuthStack","headerShown","AuthenticatedStack","authCtx","headerStyle","backgroundColor","contentStyle","title","headerTitleStyle","fontSize","Navigation","isAuthenticated","Root","isTryingLogin","SetIsTryingLogin","fetchToken","getItemAsync","storedToken","authenticate","hideAsync","preventAutoHideAsync","App"],"sources":["C:/Users/musta/Desktop/New folder/Crowd-Funding-Application/App.js"],"sourcesContent":["import { StatusBar } from \"expo-status-bar\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport * as SecureStore from \"expo-secure-store\";\r\nimport AuthContextProvider, { AuthContext } from \"./store/auth-context\";\r\nimport * as SplashScreen from \"expo-splash-screen\";\r\nimport IconButton from \"./components/ui/IconButton\";\r\nimport \"./Ignorewarning\";\r\n//Screens\r\nimport GetStarted from \"./screens/GetStarted\";\r\nimport start from \"./screens/start\";\r\n\r\nimport Choice from \"./screens/Choice\";\r\nimport Login from \"./screens/Login\";\r\nimport Signup from \"./screens/Signup\";\r\nimport Home from \"./screens/Home\";\r\nimport Drawer_Nav from \"./components/Must_components/Drawer_Nav\";\r\nimport Details from \"./components/Must_components/Details\";\r\nimport Rewards from \"./components/Must_components/Rewards\";\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nfunction AuthStack() {\r\n  return (\r\n    <Stack.Navigator\r\n      initialRouteName=\"start\"\r\n      screenOptions={{\r\n        headerShown: false,\r\n      }}\r\n    >\r\n      <Stack.Screen name=\"start\" component={start} />\r\n      <Stack.Screen name=\"ChoiceScreen\" component={Choice} />\r\n      <Stack.Screen name=\"Login\" component={Login} />\r\n      <Stack.Screen name=\"Signup\" component={Signup} />\r\n    </Stack.Navigator>\r\n  );\r\n}\r\nfunction AuthenticatedStack() {\r\n  const authCtx = useContext(AuthContext);\r\n  return (\r\n    <Stack.Navigator\r\n      screenOptions={{\r\n        headerStyle: { backgroundColor: \"#0097FF\" },\r\n\r\n        contentStyle: { backgroundColor: \"black\" },\r\n      }}\r\n      initialRouteName=\"Drawer_Nav\" //\"Home\"\r\n    >\r\n      {/* <Stack.Screen\r\n        name=\"Home\"\r\n        component={Home}\r\n        options={{\r\n          headerRight: ({ tintColor }) => (\r\n            <IconButton\r\n              icon=\"exit\"\r\n              color={\"black\"}\r\n              size={24}\r\n              onPress={authCtx.logout}\r\n            />\r\n          ),\r\n        }}\r\n      /> */}\r\n      <Stack.Screen\r\n        name=\"Drawer_Nav\"\r\n        component={Drawer_Nav}\r\n        options={{ headerShown: false }}\r\n      ></Stack.Screen>\r\n      <Stack.Screen\r\n        name=\"Details\"\r\n        component={Details}\r\n        options={{\r\n          title: \"Product Details\",\r\n          headerShown: true,\r\n          headerStyle: {\r\n            backgroundColor: \"#F23B25\",\r\n          },\r\n          headerTitleStyle: {\r\n            fontSize: 20,\r\n          },\r\n        }}\r\n      ></Stack.Screen>\r\n\r\n      <Stack.Screen\r\n        options={{\r\n          headerStyle: {\r\n            backgroundColor: \"#F23B25\",\r\n          },\r\n        }}\r\n        name=\"Rewards\"\r\n        component={Rewards}\r\n      />\r\n    </Stack.Navigator>\r\n  );\r\n}\r\n\r\nfunction Navigation() {\r\n  const authCtx = useContext(AuthContext);\r\n  return (\r\n    <NavigationContainer>\r\n      {!authCtx.isAuthenticated && <AuthStack />}\r\n      {authCtx.isAuthenticated && <AuthenticatedStack />}\r\n    </NavigationContainer>\r\n  );\r\n}\r\n\r\nfunction Root() {\r\n  const [isTryingLogin, SetIsTryingLogin] = useState(true);\r\n  const authCtx = useContext(AuthContext);\r\n  useEffect(() => {\r\n    async function fetchToken() {\r\n      const storedToken = await SecureStore.getItemAsync(\"token\");\r\n      if (storedToken) {\r\n        authCtx.authenticate(storedToken);\r\n      }\r\n      SetIsTryingLogin(false);\r\n      await SplashScreen.hideAsync();\r\n    }\r\n    fetchToken();\r\n  }, []);\r\n\r\n  if (isTryingLogin) {\r\n    SplashScreen.preventAutoHideAsync();\r\n  }\r\n  return <Navigation />;\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <>\r\n      <StatusBar style=\"light\" />\r\n      <AuthContextProvider>\r\n        <Root />\r\n      </AuthContextProvider>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}